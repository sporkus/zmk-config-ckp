#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define MAC  1
#define RAISE 2
#define KB_FN 3

/ {
    macros {
        bt0_mac: bt0_mac {
            compatible = "zmk,behavior-macro";
            label = "layer_1_rgb";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&bt BT_SEL 0 &to 1 &rgb_ug RGB_COLOR_HSB(300,100,99)>;
        };
        bt1_win: bt1_win {
            compatible = "zmk,behavior-macro";
            label = "layer_0_rgb";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&bt BT_SEL 1 &to 0 &rgb_ug RGB_COLOR_HSB(150,100,98)>;
        };
        sleep_win: sleep_win {
            compatible = "zmk,behavior-macro";
            label = "sleep_win";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp X>,
                <&macro_release>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp U &kp S>;

            wait-ms = <50>;
        };
        spc_dot_shift: spc_dot_shift {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_adj {
            bindings = <&smo 3>;
            key-positions = <1 2 3 4>;
            timeout-ms = <100>;
        };

        combo_win_copy {
            bindings = <&longpress LC(INS) LS(INS)>;
            key-positions = <47 48>;
            timeout-ms = <50>;
            layers = <0>;
        };

        combo_mac_copy {
            bindings = <&longpress LG(C) LG(V)>;
            key-positions = <47 48>;
            layers = <1>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <37 36>;
        };

        combo_bspc {
            bindings = <&bspc_morph>;
            key-positions = <24 23>;
        };
    };

    behaviors {
        smo: smo {
            compatible = "zmk,behavior-sticky-key";
            label = "SMO";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
        };
        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings =
                <&skq LSHFT>,
                <&caps_word>,
                <&kp K_CANCEL>;
        };
        longpress: longpress {
            compatible = "zmk,behavior-hold-tap";
            label = "LONGPRESS";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };
        space_morph: space_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACE_MORPH";
            bindings =
                <&kp SPACE>,
                <&spc_dot_shift>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        space_nav: space_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_NAV";
            bindings =
                <&mo>,
                <&space_morph>;

            #binding-cells = <2>;
            global-quick-tap;
            quick-tap-ms = <250>;
            flavor = "balanced";
            tapping-term-ms = <250>;
        };
        bspc_morph: bspc_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_MORPH";
            bindings =
                <&kp BSPC>,
                <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        skq: skq {
            compatible = "zmk,behavior-sticky-key";
            label = "SKQ";
            bindings = <&kp>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <500>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            // ------------------------------------------------------------------------------------------------------------
            // |  `  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  0  |  -  |  =  |BKSP | INS		|
            // | TAB  |  Q  |  W  |  E  |  R  |  T  |  Y  |  U  |  I  |  O  |  P  |  [  |  ]  |   \    | DEL		|
            // | CAPS  |  A  |  S  |  D  |  F  |  G  |  H  |  J  |  K  |  L  |  ;  |  '  |     ENTER    |PGUP	|
            // |  SHIFT  |  Z  |  X  |  C  |  V  |  B  |  N  |  M  |  ,  |  .  | /   |   SHIFT  | UP   | PGDN|
            // |  CTL  |  WIN  |  ALT  |            SPACE               | ALT | 1    |  MENU| LEFT |  DOWN    | RIGHT	|
            // ------------------------------------------------------------------------------------------------------------

            bindings = <
  &kp GRAVE     &kp N1    &kp N2    &kp N3          &kp N4    &kp N5     &kp N6  &kp N7     &kp N8    &kp N9     &kp N0    &kp MINUS  &kp EQUAL  &kp BACKSPACE  &kp C_MUTE
    &kp TAB      &kp Q     &kp W     &kp E           &kp R     &kp T      &kp Y   &kp U      &kp I     &kp O      &kp P     &kp LBKT   &kp RBKT       &kp BSLH    &kp HOME
  &lt 2 ESC      &kp A     &kp S     &kp D           &kp F     &kp G      &kp H   &kp J      &kp K     &kp L   &kp SEMI      &kp SQT    &kp RET      &kp PG_UP
&shift_caps      &kp Z     &kp X     &kp C           &kp V     &kp B      &kp N   &kp M  &kp COMMA   &kp DOT   &kp FSLH  &shift_caps     &kp UP      &kp PG_DN
             &kp LCTRL  &kp LGUI  &kp LALT  &space_nav 2 0  &kp RALT  &kp RCTRL   &mo 3   &kp LEFT  &kp DOWN  &kp RIGHT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        MAC {
            bindings = <
&trans  &trans        &trans        &trans  &trans         &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans  &trans         &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans  &trans         &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans  &trans         &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &kp LEFT_ALT  &kp LEFT_GUI  &trans  &kp RIGHT_GUI  &kp RIGHT_ALT  &trans  &trans  &trans  &trans
            >;
        };

        NAV {
            bindings = <
     &trans  &kp F1     &kp F2        &kp F3            &kp F4  &kp F5    &kp F6    &kp F7      &kp F8        &kp F9     &kp F10    &kp F11           &kp F12  &kp DEL  &kp PRINTSCREEN
&kp LA(TAB)  &trans     &trans        &trans            &trans  &trans    &trans    &trans      &kp UP        &trans      &trans     &trans            &trans   &trans          &kp END
     &trans  &trans  &sk LCTRL  &sk LEFT_ALT      &sk LEFT_GUI  &trans  &kp LEFT  &kp LEFT    &kp DOWN     &kp RIGHT      &trans     &trans  &kp C_PLAY_PAUSE   &trans
     &trans  &trans     &trans        &trans            &trans  &trans    &trans    &trans      &trans        &trans      &trans  &kp RSHFT      &kp C_VOL_UP   &trans
             &trans     &trans        &trans  &kp C_PLAY_PAUSE  &trans    &trans    &trans  &kp C_PREV  &kp C_VOL_DN  &kp C_NEXT
            >;

            sensor-bindings = <&inc_dec_kp C_AC_ZOOM_IN C_AC_ZOOM_OUT>;
        };

        ADJ {
            bindings = <
&trans  &bt0_mac    &bt1_win  &trans  &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans           &trans  &trans  &bootloader
&trans    &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans           &trans  &trans       &trans
&trans    &trans  &sleep_win  &trans  &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans           &trans  &trans
&trans    &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans  &rgb_ug RGB_BRI  &trans
          &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &rgb_ug RGB_BRD  &trans
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
        };
    };
};
